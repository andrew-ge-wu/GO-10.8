<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" version="3.0">

  <!-- #########################################################################
       ## Application configuration
       ######################################################################### -->

  <!-- Use this for the Polopoly Application Framework. -->
  <context-param>
    <param-name>p.applicationName</param-name>
    <param-value>front</param-value>
  </context-param>

  <context-param>
    <param-name>polopoly.logging.url</param-name>
    <param-value>/logger/p.gif</param-value>
  </context-param>

  <!-- #########################################################################
       ## Filters
       ######################################################################### -->

  <filter>
    <filter-name>modefilter</filter-name>
    <filter-class>com.polopoly.siteengine.dispatcher.mode.ModeUrlTranslatorFilter</filter-class>
  </filter>

  <filter>
    <filter-name>charencodingfilter</filter-name>
    <filter-class>com.polopoly.util.CharEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
  </filter>

  <filter>
    <filter-name>pathtocmservletfilter</filter-name>
    <filter-class>com.polopoly.siteengine.dispatcher.servletmapper.UrlToServletMapperFilter</filter-class>
    <init-param>
      <param-name>urlPattern</param-name>
      <param-value>(?!/(cmlink|logger|cm|WEB-INF|poll|content|captcha|membership|blogimageupload|polopoly_fs|polopolydevelopment|polopolydevelopment-auth|status|css|docs|img|js|pdf|swf|favicon\.ico)(/.*|\z)).*</param-value>
    </init-param>
    <init-param>
      <param-name>servletName</param-name>
      <param-value>/cm</param-value>
    </init-param>
  </filter>

  <filter>
    <filter-name>sitealiasfilter</filter-name>
    <filter-class>com.polopoly.siteengine.dispatcher.sitealias.SiteAliasFilter</filter-class>
  </filter>

  <!-- #########################################################################
       This filter needs to be used to take advantage of the polopoly
       dispatcher framework. This filter constucts a
       ContentDispatcher. To be used later for rendering content
       objects.  This filter actually extends the RequestPreparator
       filter which makes it possible to set any of the parameters
       from the preparator filter.
       ######################################################################### -->
  <filter>
    <filter-name>dispatcherpreparator</filter-name>
    <!-- Use this for the Polopoly Application Framework. -->
    <filter-class>com.polopoly.cm.servlet.dispatcher.impl.DispatcherPreparatorExtended</filter-class>
    <init-param>
      <param-name>ignorePattern0</param-name>
      <param-value>.*\.((jpg)|(png)|(gif)|(css)|(js)|(html)|(htm)|(ico)|(txt)|(jsp)|(doc)|(pdf)|(xml)|(rtf))$</param-value>
    </init-param>
    <init-param>
      <param-name>ignorePattern1</param-name>
      <param-value>/img/.*</param-value>
    </init-param>
    <init-param>
      <param-name>ignorePattern2</param-name>
      <param-value>/polopoly_fs/.*</param-value>
    </init-param>
    <init-param>
      <param-name>ignorePattern3</param-name>
      <param-value>/content/.*</param-value>
    </init-param>
    <init-param>
      <param-name>ignorePattern4</param-name>
      <param-value>/status</param-value>
    </init-param>
    <init-param>
      <param-name>defaultContentType</param-name>
      <param-value>text/html;charset=utf-8</param-value>
    </init-param>
    <!-- Use insert parent when creating urls. -->
    <init-param>
      <param-name>pathCreator</param-name>
      <param-value>com.polopoly.cm.path.PolicyLimitedContentPathCreator</param-value>
    </init-param>
    <init-param>
      <param-name>pathCreator.stopPolicyClassName</param-name>
      <param-value>com.polopoly.siteengine.structure.SiteRoot</param-value>
    </init-param>
    <!-- Setup toc based path translator. The tocbased path translator
         extends SimpleContentPathTranslator so resolveSymbolicIds =
         true and stripIdVersion = true for this translator as well
         (by default). -->
    <init-param>
      <param-name>pathTranslator</param-name>
      <param-value>com.polopoly.cm.path.impl.SiteEngineContentPathTranslator</param-value>
    </init-param>
    <!-- The following config is for the toc based path translator used by
       site engines content path translator. The tocbased path translator
       extends SimpleContentPathTranslator so resolveSymbolicIds =
       true and stripIdVersion = true for this translator as well
       (by default). -->
     <!-- Using p.siteengine.Sites.d as the top level department for
         friendly name lookups. -->
    <init-param>
      <param-name>pathTranslator.rootContentId</param-name>
      <param-value>p.siteengine.Sites.d</param-value>
    </init-param>
    <!-- Add all departmnet content lists that exist on the site. -->
    <init-param>
      <param-name>pathTranslator.contentListNames</param-name>
      <param-value>polopoly.Department,default,pages,articles,feeds,landingPages</param-value>
    </init-param>
    <!-- Do not fallback on content name (we implement PathSegement in
         desired policies instead). -->
    <init-param>
      <param-name>pathTranslator.contentNameFallback</param-name>
      <param-value>false</param-value>
    </init-param>
    <!-- We want to be case insensitive in lookups. -->
    <init-param>
      <param-name>pathTranslator.ignoreCaseInPathSegment</param-name>
      <param-value>true</param-value>
    </init-param>
    <!-- File path translator. -->
    <init-param>
      <param-name>filePathTranslator</param-name>
      <param-value>com.polopoly.cm.path.ContentFilePathTranslator</param-value>
    </init-param>
    <!-- UrlBuilder -->
    <init-param>
      <param-name>urlBuilder</param-name>
      <param-value>com.polopoly.siteengine.dispatcher.sitealias.SiteAliasUrlBuilder</param-value>
    </init-param>
    <!--
      The full links servlet name "urlBuilder.fullLinksServletName" will be
      appended to all links that do not match any site alias (default is
      "/cmlink"). If changed (e.g. from "/cmlink" to "/xyz") then also change:
      (1) filter 'pathtocmservletfilter' init-parameter 'urlPattern', e.g.
          <param-value>(?!(?:(?:/cmlink)|(?:/cm) ... to
          <param-value>(?!(?:(?:/xyz)|(?:/cm) ...
      (2) filter mapping 'sitewebaliasfilter' url-pattern, e.g.
          <filter-mapping>
            <filter-name>sitewebaliasfilter</filter-name>
              <url-pattern>/cmlink/*</url-pattern> ... to
          <filter-mapping>
            <filter-name>sitewebaliasfilter</filter-name>
              <url-pattern>/xyz/*</url-pattern> ...
      (3) servlet mapping 'dispatcher' url-pattern, e.g.
          <servlet-mapping>
            <servlet-name>dispatcher</servlet-name>
              <url-pattern>/cmlink/*</url-pattern> ... to
          <servlet-mapping>
            <servlet-name>dispatcher</servlet-name>
              <url-pattern>/xyz/*</url-pattern>
    -->
    <!--
      <init-param>
      <param-name>urlBuilder.fullLinksServletName</param-name>
      <param-value>/cmlink</param-value>
      </init-param>
    -->
    <!--
      <init-param>
      <param-name>urlBuilder.urlPrefix</param-name>
      <param-value>/cm</param-value>
      </init-param>
    -->
    <!--
	 The prefix for all file URLs created can be configured using the
         urlBuilder.fileUrlPrefix parameter. The prefix can either be a relative
         path such as /webapp/servlet or a complete HTTP URL. Using this parameter
	 it is possible to make all file request go through a specific domain,
	 making it easy to set up a separate HTTP proxy cache for files.
    -->
    <!--
    <init-param>
      <param-name>urlBuilder.fileUrlPrefix</param-name>
      <param-value>http://www.test.com/</param-value>
    </init-param>
    -->
    <!-- Fallback for dispatcher is a CachingRenderDispatcher with defaultMode = www. -->
    <init-param>
      <param-name>dispatcher</param-name>
      <param-value>com.polopoly.siteengine.mvc.dispatcher.cache.CachingRenderDispatcher</param-value>
    </init-param>
    <init-param>
      <param-name>dispatcher.defaultMode</param-name>
      <param-value>www</param-value>
    </init-param>
  </filter>

  <!-- #########################################################################
       This filter enables web aliases, i.e. the possibility to
       register an alias url,
       e.g. "http://siteengine.polopoly.com/news", to a real url,
       e.g. "http://siteengine.polopoly.com/cm/Greenfield/News".  In
       order to support any alias, the filter need to be mapped on
       "/*" (see filter mappings below).
       ######################################################################### -->
  <filter>
    <filter-name>sitewebaliasfilter</filter-name>
    <filter-class>com.polopoly.siteengine.dispatcher.webalias.SiteBasedWebAliasRedirector</filter-class>
    <!-- Set up a friendly-url path translator for the web alias, so that
         a content reference web alias may be resolved to a friendly url. -->
    <init-param>
      <param-name>pathTranslator</param-name>
      <param-value>com.polopoly.cm.path.TocBasedPathTranslator</param-value>
    </init-param>
    <init-param>
      <param-name>pathTranslator.contentListNames</param-name>
      <param-value>polopoly.Department,default,pages,articles,feeds,landingPages</param-value>
    </init-param>
    <init-param>
      <param-name>pathTranslator.rootContentId</param-name>
      <param-value>p.SecurityRootDepartment</param-value>
    </init-param>
    <init-param>
      <param-name>pathTranslator.contentNameFallback</param-name>
      <param-value>false</param-value>
    </init-param>
  </filter>

  <!-- #######################################################################
       This filter is actually the same class as the servlet. It is used here
       to be able to dispatch virtual domain aliases.
       #######################################################################  -->
  <filter>
    <filter-name>dispatcherfilter</filter-name>
    <filter-class>com.polopoly.cm.servlet.dispatcher.DispatcherServlet</filter-class>
    <init-param>
      <param-name>defaultPath</param-name>
      <param-value>/</param-value>
    </init-param>
  </filter>

    <!-- #######################################################################
       This filter is used to validate that the current user according to
       Polopoly maps to the membership loginName cookie.
       #######################################################################  -->
  <filter>
    <filter-name>loginvalidationfilter</filter-name>
    <filter-class>example.filter.LoginNameCookieValidationFilter</filter-class>
  </filter>

  <!-- #########################################################################
       This filter checks for presence of a captcha in the request, and if
       a captcha exists, it validates it and sets a request variable.
       ######################################################################### -->
  <filter>
    <filter-name>captchavalidationfilter</filter-name>
    <filter-class>example.filter.CaptchaValidationFilter</filter-class>
  </filter>

  <!-- #########################################################################
       Filter producing application heartbeats triggering cache updates
       and reconnect after server failures.
       ######################################################################### -->
  <filter>
    <filter-name>pacemaker</filter-name>
    <filter-class>com.polopoly.application.servlet.ApplicationHeartbeatFilter</filter-class>
  </filter>

  <!--
     The SiteEngineCleanUpFilter is used to clean up temporary models that are stored in thread locals.
     This will avoid hotdeploy problem when using thread locals.
  -->
  <filter>
    <filter-name>siteenginecleanup</filter-name>
    <filter-class>com.polopoly.siteengine.dispatcher.SiteEngineCleanUpFilter</filter-class>
  </filter>

  <!--
    The RequestWatcherFilter reports the time each request takes and prints the thread dump
    of each request that takes more than maxTimeMillis.
  -->
  <filter>
    <filter-name>requestwatcherfilter</filter-name>
    <filter-class>com.polopoly.management.troubleshooting.requestwatcher.RequestWatcherFilter</filter-class>
    <init-param>
      <!-- Request watching initial value, can be changed using JMX  -->
      <param-name>watchRequests</param-name>
      <param-value>false</param-value>
    </init-param>
    <init-param>
      <!-- Is the troubleshooter Gui allowed to enable watchRequests? (If false, it can only be change through JMX) -->
      <param-name>allowGuiActivation</param-name>
      <param-value>false</param-value>
    </init-param>
    <init-param>
      <!-- Maximum time allowed before a thread dump is generated for a thread -->
      <param-name>maxTimeMillis</param-name>
      <param-value>10000</param-value>
    </init-param>
  </filter>

  <!-- #########################################################################
       ## Filter Mappings
       ##
       ## Since preparator is used on both dispatcher and contentfileservlet
       ## AND the dispatcher filter doesn't set a filePathTranslator they
       ## will both use the filePathTranslator set in preparator.
       ##
       ## The preparator filter is mapped on /* since it's also needed by the
       ## webalias filter.
       ######################################################################### -->

  <filter-mapping>
    <filter-name>pacemaker</filter-name>
    <url-pattern>/*</url-pattern>
    <dispatcher>REQUEST</dispatcher>
  </filter-mapping>

  <filter-mapping>
    <filter-name>charencodingfilter</filter-name>
    <url-pattern>/*</url-pattern>
    <dispatcher>REQUEST</dispatcher>
  </filter-mapping>

  <filter-mapping>
    <filter-name>captchavalidationfilter</filter-name>
    <url-pattern>/*</url-pattern>
    <dispatcher>REQUEST</dispatcher>
  </filter-mapping>

<!-- It is not recommended to enable the modefilter on FORWARDs
      since it does not work in combination with SiteAliases,
      use HTTP redirects instead -->
  <filter-mapping>
    <filter-name>modefilter</filter-name>
    <url-pattern>/*</url-pattern>
    <dispatcher>REQUEST</dispatcher>
  </filter-mapping>

  <filter-mapping>
    <filter-name>pathtocmservletfilter</filter-name>
    <url-pattern>/*</url-pattern>
    <dispatcher>REQUEST</dispatcher>
    <dispatcher>FORWARD</dispatcher>
  </filter-mapping>

  <filter-mapping>
    <filter-name>dispatcherpreparator</filter-name>
    <url-pattern>/*</url-pattern>
    <dispatcher>REQUEST</dispatcher>
    <dispatcher>FORWARD</dispatcher>
  </filter-mapping>

  <filter-mapping>
    <filter-name>loginvalidationfilter</filter-name>
    <url-pattern>/*</url-pattern>
    <dispatcher>REQUEST</dispatcher>
  </filter-mapping>

  <filter-mapping>
    <filter-name>sitealiasfilter</filter-name>
    <url-pattern>/cm/*</url-pattern>
    <dispatcher>REQUEST</dispatcher>
    <dispatcher>FORWARD</dispatcher>
  </filter-mapping>

  <filter-mapping>
    <filter-name>sitewebaliasfilter</filter-name>
    <url-pattern>/cm/*</url-pattern>
    <dispatcher>REQUEST</dispatcher>
    <dispatcher>FORWARD</dispatcher>
  </filter-mapping>

  <filter-mapping>
    <filter-name>sitewebaliasfilter</filter-name>
    <url-pattern>/cmlink/*</url-pattern>
    <dispatcher>REQUEST</dispatcher>
    <dispatcher>FORWARD</dispatcher>
  </filter-mapping>

  <filter-mapping>
    <filter-name>siteenginecleanup</filter-name>
    <url-pattern>/*</url-pattern>
    <dispatcher>REQUEST</dispatcher>
    <dispatcher>FORWARD</dispatcher>
  </filter-mapping>

<!--  Mapping of the Request mapper filter -->
  <filter-mapping>
    <filter-name>requestwatcherfilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!-- The dispatcher servlet in filter guise is mapped on "/*" since
       it needs to be able to intercept virtual domain aliases. -->
  <!--
      <filter-mapping>
      <filter-name>dispatcherfilter</filter-name>
      <url-pattern>/*</url-pattern>
      <dispatcher>REQUEST</dispatcher>
      <dispatcher>FORWARD</dispatcher>
      </filter-mapping>
  -->

  <!-- #########################################################################
       ## Servlet context listeners for application initialization.
       ######################################################################### -->

  <!-- Use this for the Polopoly Application Framework. -->
  <listener>
    <listener-class>example.servlet.FrontServletContextListener</listener-class>
  </listener>

  <listener>
    <listener-class>com.polopoly.cm.servlet.velocity.VelocityServletContextListener</listener-class>
  </listener>

  <listener>
    <listener-class>com.polopoly.data.service.DataApiUtilContextListener</listener-class>
  </listener>

  <!-- #########################################################################
       ## Servlets
       ######################################################################### -->

  <servlet>
    <servlet-name>MembershipServlet</servlet-name>
    <servlet-class>example.membership.MembershipServlet</servlet-class>
  </servlet>

  <servlet>
    <servlet-name>BlogImageUploadServlet</servlet-name>
    <servlet-class>example.blog.image.BlogImageUploadServlet</servlet-class>
  </servlet>

  <servlet>
    <servlet-name>velocity</servlet-name>
    <servlet-class>org.apache.velocity.tools.view.servlet.VelocityViewServlet</servlet-class>
  </servlet>

  <servlet>
    <servlet-name>contentfileservlet</servlet-name>
    <servlet-class>com.polopoly.cm.servlet.ContentFileServlet</servlet-class>
    <!-- Parameters below are changed from the defaults to be more
         suitable for a production setup. For details about the
         parameters, see the javadoc for
         com.polopoly.cm.servlet.ContentFileServlet -->
    <init-param>
      <param-name>fileCacheTime</param-name>
      <param-value>600</param-value>
    </init-param>
    <init-param>
      <param-name>hideServletExceptions</param-name>
      <param-value>true</param-value>
    </init-param>
    <init-param>
      <param-name>logExceptionsOnLevelFINE</param-name>
      <param-value>true</param-value>
    </init-param>
    <init-param>
      <param-name>checkPermissions</param-name>
      <param-value>false</param-value>
    </init-param>

    <!-- The image generation is throttled to only allow a specific
         number of threads to generate images at the same time, to
         make sure slow image generation does not crash the whole
         site. Configure non default settings for the throttle here,
         by commenting out the following lines (the param values are
         set to the default settings): -->

    <!-- Configure the maximum number of threads that are allowed to
         generate images at the same time.  This should typically not
         be more than the number of concurrent hardware threads
         supported by the machine running the web application, and the
         machine needs enough memory to keep that many images in
         memory at the same time as well.  If the number of threads
         serving images exceed this limit, they will be queued up and
         wait for image generation to finish.
    -->
    <!--
    <init-param>
      <param-name>maxImageGenerationRenderThreads</param-name>
      <param-value>16</param-value>
    </init-param>
    -->
    <!-- Configure the maximum time in milliseconds that a thread will
         wait before being allowed to generate an image.  If no thread
         becomes available within this timeframe the servlet will
         respond with 503 Temporarily Unavailable. -->
    <!--
    <init-param>
      <param-name>imageGenerationWaitTimeout</param-name>
      <param-value>5000</param-value>
    </init-param>
    -->
    <!-- Configure the maximum number of image generation threads,
         both rendering and waiting.  If more threads than this try to
         generate images concurrently, the servlet will start
         responding with 503 Temporarily Unavailable. -->
    <!--
    <init-param>
      <param-name>maxImageGenerationThreads</param-name>
      <param-value>100</param-value>
    </init-param>
    -->
  </servlet>

  <servlet>
    <servlet-name>blogpostpreviewfileservlet</servlet-name>
    <servlet-class>example.blog.image.BlogImagePreviewServlet</servlet-class>
    <init-param>
      <param-name>fileCacheTime</param-name>
      <param-value>-1</param-value>
    </init-param>
    <init-param>
      <param-name>derivedImagesCacheTime</param-name>
      <param-value>-1</param-value>
    </init-param>
    <init-param>
      <param-name>hideServletExceptions</param-name>
      <param-value>true</param-value>
    </init-param>
    <init-param>
      <param-name>logExceptionsOnLevelFINE</param-name>
      <param-value>true</param-value>
    </init-param>
    <init-param>
      <param-name>checkPermissions</param-name>
      <param-value>false</param-value>
    </init-param>
  </servlet>

  <servlet>
    <servlet-name>dispatcher</servlet-name>
    <servlet-class>com.polopoly.siteengine.dispatcher.SiteEngineDispatcherServlet</servlet-class>
    <init-param>
      <param-name>defaultPath</param-name>
      <param-value>/</param-value>
    </init-param>
    <init-param>
      <param-name>handleTranslationException</param-name>
      <param-value>false</param-value>
    </init-param>
    <init-param>
      <param-name>hideServletExceptions</param-name>
      <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet>
    <servlet-name>status</servlet-name>
    <servlet-class>com.polopoly.management.servlet.StatusServlet</servlet-class>
    <init-param>
        <description>Only expose polopoly mbeans</description>
        <param-name>allowDomains</param-name>
        <param-value>com.polopoly</param-value>
    </init-param>
  </servlet>

  <servlet>
    <display-name>Poll Servelet</display-name>
    <servlet-name>pollservlet</servlet-name>
    <servlet-class>example.layout.element.poll.PollServlet</servlet-class>
  </servlet>

  <servlet>
    <servlet-name>captcha</servlet-name>
    <servlet-class>example.captcha.ImageCaptchaServlet</servlet-class>
    <load-on-startup>0</load-on-startup>
  </servlet>
  
  <!-- Custom Data Api -->
  <servlet>
    <servlet-name>custom-data-api-service</servlet-name>
    <servlet-class>com.sun.jersey.spi.container.servlet.ServletContainer</servlet-class>
    <init-param>
      <param-name>com.sun.jersey.config.property.packages</param-name>
      <param-value>example.data,com.polopoly.data.common</param-value>
    </init-param>
    <init-param>
      <param-name>dataApiMapping</param-name>
      <param-value>example.CustomModelMapping</param-value>
    </init-param>
  </servlet>

  <!-- #########################################################################
       ## Servlet mappings
       ######################################################################### -->

  <servlet-mapping>
    <servlet-name>MembershipServlet</servlet-name>
    <url-pattern>/membership/*</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>BlogImageUploadServlet</servlet-name>
    <url-pattern>/blogimageupload</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>captcha</servlet-name>
    <url-pattern>/captcha</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>pollservlet</servlet-name>
    <url-pattern>/poll</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>velocity</servlet-name>
    <url-pattern>*.vm</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>dispatcher</servlet-name>
    <url-pattern>/cmlink/*</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>dispatcher</servlet-name>
    <url-pattern>/cm/*</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>contentfileservlet</servlet-name>
    <url-pattern>/polopoly_fs/*</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>blogpostpreviewfileservlet</servlet-name>
    <url-pattern>/preview/blog/polopoly_fs/*</url-pattern>
  </servlet-mapping>

  <!-- Keep servlet mapping from prior versions (< 9.3) for compability. -->
  <servlet-mapping>
    <servlet-name>contentfileservlet</servlet-name>
    <url-pattern>/content/*</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>status</servlet-name>
    <url-pattern>/status</url-pattern>
  </servlet-mapping>

  <!-- #########################################################################
       ## Welcome File List
       ######################################################################### -->

  <!-- This list is needed to make sure that no welcome files are used, since they
    can hinder SiteAliases from working correctly. Do not add any welcome files to this
    list. When not using site aliases, the first site in the site root department will
    be used as a welcome file. -->
  <welcome-file-list>
    <welcome-file>_ignorewelcomefiles_</welcome-file>
  </welcome-file-list>

  <!-- #########################################################################
       ## Error Pages
       ######################################################################### -->

  <error-page>
    <error-code>400</error-code>
    <location>/WEB-INF/error400.jsp</location>
  </error-page>

  <error-page>
    <error-code>404</error-code>
    <location>/WEB-INF/error404.jsp</location>
  </error-page>

  <error-page>
    <error-code>500</error-code>
    <location>/WEB-INF/error500.jsp</location>
  </error-page>

</web-app>
